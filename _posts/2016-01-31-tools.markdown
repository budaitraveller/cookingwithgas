---
layout: post
title:  "Tooling up for smart contract development - The Good Parts."
date:   2016-01-31 09:11:03
description: Tooling up for ethereum smart contract development with geth, browser-solidity, and thet ethereum testnet.
thumbnail: person1.jpeg
categories: category1 category2
author: Budai Traveller
---

[Notes in brackets - remove as you finish - five or ten things to do]

[Step 3: swap out the redirect geth command up front with the geth attach as the primary method, and the redirect as a side note]

[Need to add info UP FRONT on how long it takes to download the testnet, and how log it takes to mine - time estimates.  Also, a "here's what we're gonna do" paragraph up front, and a "here's what we did" paragraph at the end.]

[There is a separate keystore for tesnet, check for that throughout]


[Might consider adding some loadScript commands: https://github.com/ethereum/go-ethereum/wiki/Managing-your-accounts]

[At the end, point out that people can see their smart contract and transactions on etherscan.io, and collaborate with others on them]

[
You must assign your primary account to a variable for sanity's sake:  > me = eth.accounts[0] 
You will go nuts if you copy and paste stuff
]

[Make all links into real links]

[Add screenshots]


#Motivation for this series:

This is the first article in a series on tools for smart contract development.

At the time of this writing, the state of ethereum smart contract development tools and documentation was: sub-optimal.  A beginner could spend many days banging their head against documentation and tools so buggy as to be barely functional.  

Therefore, by developing this article, and by fixing issues that you report, we hope that together we might save a few bothans, many of whom have already died to bring you this information.

#Goals for this article:

This article will walk you, step by step, through deploying your first smart contract on the ethereum testnet blockchain.  This is *not* an article on the programming language solidity - those articles will come later.

When you have completed this tutorial, you will have a reliable set of tools that a beginning smart contract developer can use to develop ethereum smart contracts and to share them with others on the testnet.

#Time and resources required

You are going to need a modern computer with lots of free disk space and a broadband connection.  Mac or Linux users should be fine.  We probably won't test on windows ourselves, but welcome others to do so.

The entire tutorial should only take less than an hour, with the exception of step four: downloading the testnet blockchain.

Step four requires you to download the ethereum testnet blockchain.  That is equivalent to downloading many gigabytes of data.  Most likely, you will only have to do this once in your life.

Downloading the ethereum testnet blockchain takes several hours to an entire day, depending on your bandwidth and the number of peers you find.  During that time, you will be doing something else.  So expect a long break about halfway through this one hour tutorial.

#Where to get help, and how to file a bug report on this tutorial

To get help:

[Ethereum on gitter|https://blog.ethereum.org/2015/09/18/ethereum-comms-announcement/]
[Ethereum on IRC|https://github.com/ethereum/go-ethereum/wiki/Geth#irc]

To file a bug report:

TBD - link to github issues page

#Test log:

This tutorial tested working by:

07/20/2016: JD: Geth: 1.4.7-stable, Go: 1.6.2, OSX 11]
07/19/2016: RB: Geth: 1.3.6, Go: 1.6.1, OSX 10.9]

#Last updated: 

07/21/2016

#Audience:

Developers who have never developed an ethereum smart contract (or given up in frustration attempting to do so).  You should already know:

* How to use the command line
* How to write software
* The basic terminology of blockchain tech and ethereum

#Tools we will use:

(We'll show you how to get these as we go)
* The ethereum CLI tool "geth"
* The solidity web IDE "browser-solidity"
* The ethereum "testnet" blockchain.  

#Steps

##Step 1 

Download and install the tool "geth" in accordance with: [The Ethereum CLI Dowload Page|https://www.ethereum.org/cli]

[Screenshot]({{ site.url }}/assets/img/tools_article/)

##Step 2

Launch geth as follows:

`geth --testnet --rpc --rpccorsdomain '*' console 2>> geth.log`

***Extra stuff:***

```
--testnet means "run on the testnet"
--rpc means "listen for rpc commands that come from outside"
--rpccorsdomain '*' ?I think means? allow things from not on your computer to talk to it... basically a big fat security hole. 
`console` means launch a console with this
```

The last bit "2>> geth.log" pushes the frequent blockchain/mining info to a log file, so that you can more easily use the console.  ***You can also run geth in one terminal, and in the other, "geth attach"***  

If you get stuck: "exit"

If you think you will do this more than once, make a little script to set it up:

```
bash-3.2$ echo "geth --testnet --rpc --rpccorsdomain '*' console" > ~/bin/rungeth.sh
bash-3.2$ chmod +x ~/bin/rungeth.sh
```

##Step 3

Create and unlock an account: 

On the geth console, type:

```
> personal.newAccount()
Passphrase: 
"0x1aefd704facfda6069270ab69ef73e847aa897cc"
```

That long string is your account address.

Now, to unlock your account, in the geth console type this:

```
> eth.accounts
```

You will see the address of the account you just made.  You must unlock that account to use it.

Using the address of the account you just displayed, and the password you used to create it, type

```
personal.unlockAccount("0x9bcd2d4f8dddea8f4ff303fe2052fc134b655c8a", "your_password")
```

You will get the response ***true***.  Most of the time, undefined or true means success on the geth console.

Of course, save your password in a password database of your choosing.

***Extra stuff:***

See also: https://github.com/ethereum/go-ethereum/wiki/Managing-your-accounts

To make an alias for that account:

```
> var me = eth.accounts[0];
undefined
> me
"0x9bcd2d4f8dddea8f4ff303fe2052fc134b655c8a"
> 
```
Note that the response to a correct assignment is: ***undefined***

And further, that your accounts are now located here:

```
bash-3.2$ cd ~/Library/Ethereum/testnet/keystore/
bash-3.2$ ls -la
total 24
drwx------   5 rsb  staff  170 Jul 18 14:34 .
drwxr-xr-x  10 rsb  staff  340 Jul 18 14:43 ..
-rw-------   1 rsb  staff  491 Apr 16 23:25 UTC--2016-04-17T06-25-49.791304738Z--305fb0d6fcf12c715c6cab221a3fcbd32aa1c44f
-rw-------   1 rsb  staff  491 Apr 23 23:20 UTC--2016-04-24T06-20-40.267773067Z--882bd3a2e9d74110b24961c53777f22f1f46dc5d
-rw-------   1 rsb  staff  491 Jul 18 14:34 UTC--2016-07-18T21-34-51.694566352Z--da05d4c4fba23675e8d0a8d553075b0bb9dd0121
```

And note that the command ">geth --testnet account list" does not do what you think it should (give you the account addresses, right?) - it gives you a unique index to the account that you won't use in this tutorial (or ever, most likely).  You can find your account addresses via the geth console:

```
> eth.accounts[0]
"0x9bcd2d4f8dddea8f4ff303fe2052fc134b655c8a"
```

Finally, a note on deleting accounts: Rather than blowing those files away to delete and account (there is no delete function) just encrypt them and move them aside:

```
    cd ~/Library/Ethereum/keystore/
    ls -la
    tar cvzf oldkeys.tgz  *
    openssl aes-256-cbc -a -salt -in oldkeys.tgz -out oldkeys.tgz.enc
    ls
    rm UTC*
    rm oldkeys.tgz
    mv oldkeys.tgz.enc ~/place_I_store_encrypted_stuff_that_gets_backed_up
```

##Step 4

To continue, you are going to need to obtain the full testnet blockchain, and obtain some testnet ether.  We'll show you how to do that the old fashioned way, by syncing your blockchain and mining some ether.

Your copy of geth should already be downloading the full testnet from peers all over the world.  This will take a full day for most people, and require many gigabytes of data be downloaded.  Unless you have a friend you trust in physical proximity who can copy the blockchain to your computer, then you will have to wait.

While your copy of geth downloads the blockchain, you should see messages in the geth console talking about blocks, like so:

```
I0718 18:57:19.859391   43671 blockchain.go:1251] imported 1 block(s) (0 queued 0 ignored) including 0 txs in 4.389402ms. #1333027 [2f0e3825 / 2f0e3825]
```

The message above imported only one block.  When you are just starting to sync down the blockchain, you will see messages that more than one block has been imported (often 256 blocks).

These blocks have to come from somewhere, right?  They come from peers.  If you don't see blocks downloading, check to see if you have any peers with "net" commands on the console, like so:

```
> net.listening
true
> net.peerCount
10
```

If you have no peers, you could have a firewall issue.  You will need to be able to connect to port 30303 on other systems to discover peers.  To get a little info from geth as to what ports it is using to communicate, type:

```
> admin.nodeInfo
```

You will get a whole bunch of json info back, including a section telling you what port geth is using outbound to discover other systems:

```
  ports: {
    discovery: 30303,
    listener: 30303
  },
```

When your testnet blockchain is fully synced, you will see:

* Messages reporting that one block at a time is being imported.
* The block number in each message (looks like: #1333027) will match the highest block mined on ethernet block explorer sites (like: https://testnet.etherscan.io/) 

####Mining some ether

NOTE: You have to be fully synced before you can mine.  Make sure you have the lastest block as per https://testnet.etherscan.io, then continue with this step.

In the geth console, type:

```
> miner.start()
```

Now check the geth log, after a few minutes, you should see some messages start to show up about "Generating DAG".  The "DAG" is a giant file that must be generated or obtained prior to mining.  When you get close to having the full file generated, you will see the percentage approach 100 in the geth logs:

```
I0718 19:27:02.221854   45253 ethash.go:252] Generating DAG: 96%
I0718 19:27:08.514340   45253 ethash.go:252] Generating DAG: 97%
I0718 19:27:14.770954   45253 ethash.go:252] Generating DAG: 98%
```

And you will see work committed on new blocks by your CPU, like so:

```
I0718 19:38:53.697866   45253 worker.go:569] commit new work on block 1333201 with 1 txs & 0 uncles. Took 44.675404ms
```

It could take hours, but usually within 20 minutes, you should see mining happening, like so:

```
I0718 19:46:48.537178   39568 worker.go:348] :hammer:  Mined block (#1333236 / 065dff46). Wait 5 blocks for confirmation
```

The ether will go into your primary account (after five blocks have confirmed it).  Your primary account is your first account, unless you set another account as your primary account.  Unlock your account if it's locked, and check the balance via the geth console:

```
eth.getBalance("0x9bcd2d4f8dddea8f4ff303fe2052fc134b655c8a")
```

####Problems you will run into

Check every hour or so to see if you are still downloading blocks.

Your copy of geth will not always be able to find peers.  If you see that it has stalled in downloading blocks, exit and restart.  You won't lose any blocks, you will just need to give it a kickstart in finding new peers again, and it will pick up where it left off.  If you network connection is very bad, this will happen more often.  If it is very good, this will happen less often.  

####Alternate method requiring help from a friend who is doing this with you:

You can speed this up if you or someone you know has an up-to-date copy of the testnet blockchain, and a account with testnet ether they can share with you.  That's the ideal scenario, because you won't have to wait for all this stuff.  

To use this method, copy your friends /chaindata directory contents into your /chaindata directory.

Then, run geth as before, and when have them send some ether to your account.  A few blocks later on the testnet, your ether will appear.

##Step 5

Go to the online compiler at : http://ethereum.github.io/browser-solidity/#version=soljson-latest.js

NOTE: For the moment, use http for that URL, not https.

##Step 6

Create a contract... I suggest:

```
contract HelloWorld{
    string public message;
    
    function setMessage(string newMessage){
        message = newMessage;
    }
    
}
```

##Step 7

On the right hand side of the online compiler, click on the little tab that has a icon of a Box on it, which appears between the paper airplane tab and the cloud upload tab. (hereafter the block tab will be called the "Environment" tab)

##Step 8 

In the Environment tab select the radio button for **web3 provider**, and make sure web3 provider endpoint is set to `http://localhost:8545`

##Step 9

Click the red "create" button....

You should see: "Waiting for transaction to be mined..." just below it

If you see: 

  *"Invalid JSON RPC response:" or "Could not connect to http://localhost:8545"
     *These are "connection" type errors.  They usually mean that either geth isn't running, or it doesn't have the --rpc flag on it, or it is on a different port from 8545, or for some other reason geth cannot be found and communicated with. **this error also occurs if you are using https to connect to the online editor**.  The actual error message you receive will be browser dependent.

  *"Error: could not unlock signer account" 
     * it probably means you forgot to unlock your account, or the account timed out and locked - try step #3

##Step 10

Your contract is now technically deployed. You have two options, you can interact with it through the web editor, or through the geth console... Let's play with it on the geth console first....

##Step 11

This step is a little tricky.

In the web editor copy the text in the box "interface"... 

It should look something like this: 

`[{"constant":false,"inputs":[{"name":"newMessage","type":"string"}],"name":"setMessage","outputs":[],"type":"function"},{"constant":true,"inputs":[],"name":"message","outputs":[{"name":"","type":"string"}],"type":"function"}]`

##Step 12

Go to the geth console.  We are going to create the contract on the console.

To do that we will create a variable called helloWorld, and assign it to an ethereum contract:

The format of the command will be:

var helloWorld = eth.contract("YOUR_INTERFACE_STRING").at("YOUR_ACCOUNT_ADDRESS")

To build this string, you will probably want to open your favorite text editor.

You will then build a string that looks something like this with your ABI and addy:

`var helloWorld = eth.contract([{"constant":false,"inputs":[{"name":"newMessage","type":"string"}],"name":"setMessage","outputs":[],"type":"function"},{"constant":true,"inputs":[],"name":"message","outputs":[{"name":"","type":"string"}],"type":"function"}]
).at("<9bcd2d4f8dddea8f4ff303fe2052fc134b655c8a>")`

The `<address>` is the contract address that got created when you clicked the create button in the solidity web compiler.

It can be found either on an earlier line in your geth logs that will look something like this:

`> I0718 14:20:18.814556   38882 xeth.go:1026] Tx(0x67d0e5c297f1fc12272dede2484366e1ae7c70e254ea645a4bcd911cc7e46138) created: 0x34f560368e973679a4e8644ee7d25a961b8662bb` (0x34f560368e973679a4e8644ee7d25a961b8662bb is the address)

Or in your solidity web compiler, in a line that will look something like this:

"HelloWorld at 0x34f560368e973679a4e8644ee7d25a961b8662bb (blockchain)"

**note that it should be in double quotes inside the .at() call**

Transactions return: "undefined", so that's what you'll see.

Problems you might run into: 

* If your account is locked: 
  * unlock it with: personal.unlockAccount("address", "password")


##Step 13

Now you have the contract under helloworld. In the console type:
`> helloWorld` and you should see something like this:
```
{
  address: "0xafebc7b4b1d0d8bef87c20d9ed6b1739589a6a69",
  allEvents: function(),
  message: function(),
  setMessage: function()
}
```

##Step 14

Try getting the message from helloWorld, which is currently unset by calling:
`helloWorld.message.call()`

##Step 15

Try setting the message from helloWorld by calling:

`helloWorld.setMessage.sendTransaction("Greetings Blockchain", {from: eth.accounts[0]})`

This will cost you a little bit of gas on the testnet, maybe 200,000.  That would be real money (a couple US cents) on the mainnet. 

you **must wait for blocks to be mined before this takes effect**, I usually wait for at least **2** blocks to be mined because sometimes it doesn't get caught in the first block

##Step 16

Try `helloWorld.message.call()` again. 

##Step 17

Now lets try to use the online compiler to interact with it. This is useful, but I haven't figured out how to send money with transactions, which is a disadvantage for some of our more complicated contracts... but lets at least use the interface. because they are sort of fun

There should be a red button on the right hand side, that says "fallback" just below "HelloWorld at 0x34f560368e973679a4e8644ee7d25a961b8662bb (blockchain)". (You may have to toggle a little arrow at the right in order to see it) 

Below this button there should be a blue button that says "message" and a red button with a field that says "setMessage"

Click on the Blue Button that says "message" 
 you should see something like 
```
Value: "0x000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000144772656574696e677320426c6f636b636861696e000000000000000000000000"
Decoded:
string: Greetings Blockchain
```

##Step 18

Lets try setting the value now... type **"Hello from the online compiler"** into the field next to the red button called "setMessage". *be sure to include the quotes marks on the string*

click the setMessage button and then wait for the transaction to be mined

After the transaction is mined, try the blue "message" button again.

You should see your message in the interface.

###Other Stuff:

Testnet blockchain explorers (see your transactions on the testnet):

 https://testnet.etherscan.io/ 
 https://morden.ether.camp/ 


Transactions and Calls:

Transactions cost gas and store stuff on the blockchain
Calls are free and don't store anything - they run locally on your copy of geth only.
You made a call to setMessage, you didn't make any transactions.
 